// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: commands.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Command_RunExecutable_FullMethodName = "/proto.Command/RunExecutable"
	Command_FileUpload_FullMethodName    = "/proto.Command/FileUpload"
	Command_FileDownload_FullMethodName  = "/proto.Command/FileDownload"
)

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandClient interface {
	RunExecutable(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RunExecutableInput, RunExecutableResult], error)
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, emptypb.Empty], error)
	FileDownload(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) RunExecutable(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RunExecutableInput, RunExecutableResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[0], Command_RunExecutable_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunExecutableInput, RunExecutableResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_RunExecutableClient = grpc.BidiStreamingClient[RunExecutableInput, RunExecutableResult]

func (c *commandClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[1], Command_FileUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_FileUploadClient = grpc.ClientStreamingClient[FileChunk, emptypb.Empty]

func (c *commandClient) FileDownload(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Command_ServiceDesc.Streams[2], Command_FileDownload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_FileDownloadClient = grpc.ServerStreamingClient[FileChunk]

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility.
type CommandServer interface {
	RunExecutable(grpc.BidiStreamingServer[RunExecutableInput, RunExecutableResult]) error
	FileUpload(grpc.ClientStreamingServer[FileChunk, emptypb.Empty]) error
	FileDownload(*FileChunk, grpc.ServerStreamingServer[FileChunk]) error
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandServer struct{}

func (UnimplementedCommandServer) RunExecutable(grpc.BidiStreamingServer[RunExecutableInput, RunExecutableResult]) error {
	return status.Errorf(codes.Unimplemented, "method RunExecutable not implemented")
}
func (UnimplementedCommandServer) FileUpload(grpc.ClientStreamingServer[FileChunk, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedCommandServer) FileDownload(*FileChunk, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}
func (UnimplementedCommandServer) testEmbeddedByValue()                 {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	// If the following call pancis, it indicates UnimplementedCommandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_RunExecutable_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandServer).RunExecutable(&grpc.GenericServerStream[RunExecutableInput, RunExecutableResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_RunExecutableServer = grpc.BidiStreamingServer[RunExecutableInput, RunExecutableResult]

func _Command_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandServer).FileUpload(&grpc.GenericServerStream[FileChunk, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_FileUploadServer = grpc.ClientStreamingServer[FileChunk, emptypb.Empty]

func _Command_FileDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileChunk)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServer).FileDownload(m, &grpc.GenericServerStream[FileChunk, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Command_FileDownloadServer = grpc.ServerStreamingServer[FileChunk]

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Command",
	HandlerType: (*CommandServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunExecutable",
			Handler:       _Command_RunExecutable_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FileUpload",
			Handler:       _Command_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileDownload",
			Handler:       _Command_FileDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commands.proto",
}
